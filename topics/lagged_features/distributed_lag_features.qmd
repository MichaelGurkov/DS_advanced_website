---
title: "Distributed lag features"
---

```{r set_up_python, echo=FALSE}
#|echo: FALSE

if (Sys.getenv("USERPROFILE") == "C:\\Users\\internet"){
  
  python_path = paste0("C:\\Users\\internet\\AppData\\Local",
                       "\\Programs\\Python\\Python312\\python.exe")
} else {
  
  python_path = paste0("C:\\Users\\Home\\AppData\\Local",
                       "\\Programs\\Python\\Python312\\python.exe")
}

reticulate::use_python(python_path)

```

```{python}

import numpy as np

import pandas as pd

import os 


from statsmodels.tsa.seasonal import MSTL

# plotting libraries
import matplotlib.pyplot as plt
import numpy as np
import pandas as pd
import seaborn as sns
from matplotlib.ticker import MaxNLocator


```

```{python import_data}

file_path = os.path.expanduser("~/Documents") + "\\DS_advanced_website\\data\\example_air_quality.csv"

raw_df = pd.read_csv(file_path)

raw_df.index = pd.to_datetime(raw_df["Date_Time"])

raw_df = raw_df.drop(columns = ["Date_Time"]).copy()


```

```{python plot_raw_data}

fig, axes = plt.subplots(nrows = 2)

for idx, ax in enumerate(axes):
  raw_df.iloc[:,[idx]].plot(ax = ax,
                            legend = False,
                            title = raw_df.columns.values[idx])
  ax.set_xlabel('')
  ax.set_ylabel('')
                            
plt.tight_layout(h_pad=3)

plt.show()

```

# Domain knowledge

## Extract calendar features

```{python}

calendar_df = raw_df.copy()

calendar_df["hour"] = calendar_df.index.hour

calendar_df["month"] = calendar_df.index.month

calendar_df["day_of_week"] = calendar_df.index.day_of_week


```

### Daily seasonality

++ explain that we see a pattern and that means that the time of day has an effect on the expected value. That means that we should include a lag of 24 hours that will represent the value of the previous observation at the same hour.

```{python hourly_seasonality}


fig, axes = plt.subplots(nrows = 2)

for idx, ax in enumerate(axes):
  calendar_df.groupby("hour")[["CO_sensor","RH"]].mean().iloc[:,[idx]].plot(ax = ax,
                            legend = False,
                            title = raw_df.columns.values[idx])
  ax.set_xlabel('')
  ax.set_ylabel('')
                            
plt.tight_layout(h_pad=3)

plt.show()

```

### Yearly seasonality

++ explain that we see a pattern and that means that the month has an effect on the expected value. That means that we should include a lag of 24 hours \* 365 days that will represent the value of the previous observation at the same month.

```{python monthly_seasonality}


fig, axes = plt.subplots(nrows = 2)

for idx, ax in enumerate(axes):
  calendar_df.groupby("month")[["CO_sensor","RH"]].mean().iloc[:,[idx]].plot(ax = ax,
                            legend = False,
                            title = raw_df.columns.values[idx])
  ax.set_xlabel('')
  ax.set_ylabel('')
                            
plt.tight_layout(h_pad=3)

plt.show()

```

# Feature selection

```{python import_libraries}

from feature_engine.timeseries.forecasting import LagFeatures

from sklearn.linear_model import Lasso

from sklearn.preprocessing import StandardScaler

```

```{python}

lags_list = [f"{temp_lag}h" for temp_lag in range(1, 24* 7)]

lag_trans = LagFeatures(variables = ["CO_sensor","RH"], freq = lags_list)

lags_df = lag_trans.fit_transform(raw_df.copy())

lags_df = lags_df.dropna().copy()

```

```{python }

features = [temp_name for temp_name in lags_df.columns if "lag" in temp_name]

y_vec = StandardScaler().fit_transform(lags_df[["CO_sensor"]].copy())

X_mat = StandardScaler().fit_transform(lags_df[features].copy())

lasso_model = Lasso(alpha = 0.1)

lasso_model.fit(X_mat, y_vec)

```

```{python }

feature_importance = pd.Series(index = features, data = lasso_model.coef_)

feature_importance.abs().nlargest(5)

```

# Correlation methods

```{python import_correlation_libraries}

from statsmodels.tsa.stattools import acf, pacf, ccf

from statsmodels.graphics.tsaplots import plot_acf, plot_pacf


```

++ explain that pacf depends on stationarity (lack of trend and seasonality). Our data has trend and seasonality so it's not stationary. We will detrend and deseasonalize the data later on


```{python plot_acf_and_pacf}


fig, axes = plt.subplots(ncols = 2)

plot_acf(raw_df["CO_sensor"].copy(),
ax  = axes[0], lags = 100, marker = ".")

plot_pacf(raw_df["CO_sensor"].copy(),
ax  = axes[1], lags = 25, marker = ".")

fig.suptitle("CO_sensor ACF and PACF", fontsize=16)

plt.tight_layout(w_pad = 3)

plt.show()

```

## Detrend and deseasonalize

```{python decompose_mstl}

resid_df = raw_df.copy()

for temp_col in resid_df.columns:
  mstl_decomp = MSTL(endog = resid_df[temp_col], periods = [24, 7*24]).fit()
  resid_df[temp_col + "_resid"] = mstl_decomp.resid



```

```{python plot_residuals}

fig, axes = plt.subplots(nrows = 2)

resid_df["CO_sensor_resid"].plot(ax = axes[0], title = "CO_sensor_resid", xlabel = '')

resid_df["RH_resid"].plot(ax = axes[1], title = "RH_resid", xlabel = '')

plt.tight_layout(h_pad=3)

plt.show()

```

```{python plot_acf_and_pacf_resid}


fig, axes = plt.subplots(ncols = 2)

plot_acf(resid_df["CO_sensor_resid"].copy(),
ax  = axes[0], lags = 100, marker = ".")

plot_pacf(resid_df["CO_sensor_resid"].copy(),
ax  = axes[1], lags = 25, marker = ".")

fig.suptitle("CO_sensor residual ACF and PACF", fontsize=16)

plt.tight_layout(w_pad = 3)

plt.show()

```
