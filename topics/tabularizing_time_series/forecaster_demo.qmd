---
  title: "Forecasting demonstration - EDA"
---

```{r set_up_python, echo=FALSE}
#|echo: FALSE

if (Sys.getenv("USERPROFILE") == "C:\\Users\\internet"){
  
  python_path = paste0("C:\\Users\\internet\\AppData\\Local",
                       "\\Programs\\Python\\Python312\\python.exe")
} else {
  
  python_path = paste0("C:\\Users\\Home\\AppData\\Local",
                       "\\Programs\\Python\\Python312\\python.exe")
}

reticulate::use_python(python_path)

```

```{python}

import pandas as pd
import matplotlib.pyplot as plt
import os 

```

## Data loading

```{python import_data}

file_path = os.path.expanduser("~/Documents") + "\\DS_advanced_website" + \
"\\data\\air_quality_processed_df.csv"

air_quality_processed_df = pd.read_csv(file_path,
                             index_col = "Date_Time")

air_quality_processed_df.index = pd.to_datetime(air_quality_processed_df.index)

```

## Compare models

```{python split_data}

y_vec = air_quality_processed_df["CO_sensor"]

X_mat = air_quality_processed_df.drop("CO_sensor", axis = 1)

X_mat_train = X_mat.loc[X_mat.index <= pd.to_datetime("2005-03-04")]

y_vec_train = y_vec.loc[X_mat.index <= pd.to_datetime("2005-03-04")]

X_mat_test = X_mat.loc[X_mat.index > pd.to_datetime("2005-03-04")]

y_vec_test = y_vec.loc[X_mat.index > pd.to_datetime("2005-03-04")]


```

### Naive model

++ explain that as naive model we often take the last known value (the previous hour value in our case)

```{python, naive_forecast}

naive_forecast = air_quality_processed_df.loc[air_quality_processed_df.index > pd.to_datetime("2005-03-04")]["CO_sensor_lag_1"]

```

### Linear regression

```{python linear_reg_forecast}

from sklearn.linear_model import LinearRegression

lin_reg = LinearRegression()

lin_reg.fit(X_mat_train, y_vec_train)

lin_reg_forecast = lin_reg.predict(X_mat_test)


```

### Random forest

```{python random_forest_forecast}

from sklearn.ensemble import RandomForestRegressor

rand_forest = RandomForestRegressor(
    n_estimators=50,
    max_depth=3,
    random_state=0,
)

rand_forest.fit(X_mat_train, y_vec_train)

rand_forest_forecast = lin_reg.predict(X_mat_test)


```

### Evaluate models

```{python }

from sklearn.metrics import root_mean_squared_error


print(f"Naive forecat error is {root_mean_squared_error(naive_forecast, y_vec_test)}")

print(f"Linear regression error is {root_mean_squared_error(lin_reg_forecast, y_vec_test)}")

print(f"Random forest error is {root_mean_squared_error(rand_forest_forecast, y_vec_test)}")


```
