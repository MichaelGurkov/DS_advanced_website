---
title: "Feature Engineering"
---

```{r set_up_python, echo=FALSE}
#|echo: FALSE

if (Sys.getenv("USERPROFILE") == "C:\\Users\\internet"){
  
  python_path = paste0("C:\\Users\\internet\\AppData\\Local",
                       "\\Programs\\Python\\Python312\\python.exe")
} else {
  
  python_path = paste0("C:\\Users\\Home\\AppData\\Local",
                       "\\Programs\\Python\\Python312\\python.exe")
}

reticulate::use_python(python_path)

```

```{python}

import pandas as pd
import matplotlib.pyplot as plt
import os 

```

Feature engineering is the process of transforming and creating new input variables, or features, from raw data to improve the performance of predictive models. It involves converting raw data into meaningful inputs that capture underlying patterns or relationships useful for forecasting. In the context of time series forecasting, the choice of features can significantly impact the model's ability to make accurate predictions. For example, simply using the raw values of a time series may not be enough for the model to capture complex temporal dynamics such as trends or seasonality. Therefore, transforming features or creating new ones like time-based features, lag features, or cyclical patterns is crucial. This tutorial will demonstrate several types of feature transformations, including time-related features, lag features, window (rolling) features, and periodic features. This is only a short demonstration, each type will be covered in detail in its respective section.

## Data loading

```{python import_data}

file_path = os.path.expanduser("~/Documents") + "\\DS_advanced_website\\data\\example_air_quality.csv"

air_quality_df = pd.read_csv(file_path,
                             index_col = "Date_Time")

air_quality_df.index = pd.to_datetime(air_quality_df.index)

```

The dataset `air_quality_df` is loaded from a CSV file and indexed by a column named `Date_Time`, which represents timestamps of the air quality readings. This timestamp index is essential for time series analysis, allowing us to analyze the data in chronological order. The dataset includes sensor readings such as `CO_sensor`, which captures the concentration of carbon monoxide (CO) in the air, and `RH`, which records relative humidity (RH) levels. These two variables provide environmental and pollutant measurements that will be key in our analysis.

## Time related features

In this section, we extract time-related features that are essential for improving the performance of our forecasting model. These features include temporal information such as the month, day, and hour of each observation. These are known as "future-known" features, meaning that their values for future timestamps are already known at the time of making a forecast. For example, we always know in advance what the month or hour will be for any given future date. These time-related features provide useful context that can help the model better understand seasonal patterns, daily fluctuations, or other time-dependent behaviors in the data.

```{python extract_calendar_features}

calendar_df = pd.DataFrame(index = air_quality_df.index)

calendar_df["Month"] = air_quality_df.index.month

calendar_df["Day"] = air_quality_df.index.day

calendar_df["Hour"] = air_quality_df.index.hour

calendar_df.head()

```

## Lag features

Lag features capture values from previous time points and can be particularly useful in forecasting. For instance, the concentration of CO at the current hour could be related to the concentration of CO from one or 24 hours ago. By introducing lagged versions of the original features, the model gains insight into how past values may influence future outcomes.

In the code, we generate lag features for each variable using a set of lag intervals (1 hour and 24 hours). This is done by shifting the values in the dataset by the specified lag periods. However, this process creates missing values for the initial time steps where the lagged data is not available (e.g., if we're using a 24-hour lag, the first 24 hours will have missing values). These missing values will need to be handled later by either imputing them or dropping the corresponding rows.

Additionally, note the use of parentheses to continue the statement across lines in the loop. This enhances code readability and makes it easier to follow the logic.

```{python extract_lag_features}

lag_features_df = pd.DataFrame(index = air_quality_df.index)

lags = [1, 24]

for temp_col in air_quality_df.columns:
  for temp_lag in lags:
    lag_features_df[temp_col + "_lag_" + str(temp_lag)] = (
      air_quality_df[temp_col].shift(freq = str(temp_lag) + "h")
      )

lag_features_df.head(25)

```

## Window features

Window features represent rolling statistics (such as averages) calculated over a fixed window of previous time points. These are useful in capturing short-term trends in the data. For example, the mean CO concentration over the past three or seven hours might provide valuable information for predicting future values.

In the code, we generate window features by computing the rolling mean over windows of 3 and 7 hours. The `.shift()` function is applied to ensure that the calculated window statistics are available only for past observations (i.e., the mean is based on past data up to the current time point). This ensures that the model respects the forecasting principle of only using information that would have been available at the time of prediction.

```{python extract_window_features}

window_features_df = pd.DataFrame(index = air_quality_df.index)

windows = [3, 7]

for temp_col in air_quality_df.columns:
  for temp_win in windows:
    window_features_df[temp_col + "_win_" + str(temp_win)] = (
      air_quality_df[temp_col]
      .rolling(window = temp_win).mean()
      .shift(freq = "1h")
      )

window_features_df.head(8)

```

Let's verify the calculation of the 3-hour window feature manually. We want to compute the mean CO concentration for the hours leading up to "2004-04-04 03:00:00" (i.e., using data from "2004-04-04 00:00:00" to "2004-04-04 02:00:00").

```{python}

expected_value = air_quality_df.loc[
  (air_quality_df.index >= pd.Timestamp("2004-04-04 00:00:00")) &
  (air_quality_df.index <= pd.Timestamp("2004-04-04 02:00:00"))
  ]["CO_sensor"].mean()

expected_value = round(expected_value,3)

calculated_value = window_features_df.loc[
window_features_df.index == pd.Timestamp("2004-04-04 03:00:00")
]["CO_sensor_win_3"].iloc[0]

calculated_value = round(calculated_value,3)

if (expected_value == calculated_value):
  print(f'''
  the expected value is {expected_value}, the calculated value is {calculated_value}. 
  We're good!
  ''')


```

## Periodic features

Certain time-related features, such as the month or hour, follow a cyclical pattern. For instance, December (month 12) is closer to January (month 1) than it is to April (month 4), even though 12 is numerically farther from 1 than from 4. To capture this cyclical nature, we can transform these features using periodic functions such as sine and cosine.

By converting numerical time features into cyclical features, we help the model learn seasonal patterns more effectively. For this purpose, we use the `feature_engine` library to create these cyclical features for our dataset.

```{python extract_cyclical_features}

from feature_engine.creation import CyclicalFeatures

cyclical = CyclicalFeatures(
  drop_original = True,
)

cyclical_df = cyclical.fit_transform(calendar_df)

cyclical_df.head()

```

## Save processed data

In the final step of preprocessing, we must address the missing values that have been introduced during feature engineering, particularly in the creation of lag and window features. These missing values arise because, for example, a 24-hour lag feature requires data from 24 hours prior, which is unavailable for the first 24 observations. Similarly, window features, such as rolling averages, rely on past data over a specified period, leading to NA values at the start of the series where insufficient prior data exists.

There are generally two approaches to handle these missing values: imputation or deletion. Imputation involves replacing missing values with substitutes, such as the mean or median of the available data. However, given that the number of missing values is relatively small in this case, and since dropping rows with missing data simplifies the process, we will opt to drop the rows containing missing values. This ensures that the final dataset is complete and ready for modeling without introducing any potential bias from imputation.

Once the missing values are handled, the processed dataset, which includes the original data along with the engineered features (such as lag, window, and cyclical features), is saved to a CSV file for further use.

```{python}

processed_df = pd.concat([air_quality_df, calendar_df,lag_features_df, cyclical_df], axis = 1)

processed_df.dropna(inplace = True)

processed_df.to_csv(os.path.expanduser("~/Documents") + "\\DS_advanced_website" + "\\data\\air_quality_processed_df.csv")

```