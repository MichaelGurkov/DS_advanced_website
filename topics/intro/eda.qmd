---
title: "Exploratory Data Analysis - EDA"
---

```{r set_up_python, echo=FALSE}
#|echo: FALSE

if (Sys.getenv("USERPROFILE") == "C:\\Users\\internet"){
  
  python_path = paste0("C:\\Users\\internet\\AppData\\Local",
                       "\\Programs\\Python\\Python312\\python.exe")
} else {
  
  python_path = paste0("C:\\Users\\Home\\AppData\\Local",
                       "\\Programs\\Python\\Python312\\python.exe")
}

reticulate::use_python(python_path)

```

```{python}

import pandas as pd
import matplotlib.pyplot as plt
import os 

```

## Introduction to Exploratory Data Analysis (EDA)

Exploratory Data Analysis (EDA) is a crucial step in any data science or time series analysis process. It involves visually and statistically summarizing the key characteristics of a dataset to gain insights into its structure, underlying patterns, and potential issues such as missing data or outliers. In this short tutorial, we will focus on performing EDA on time series data. Specifically, we will identify and handle missing values and explore seasonalityâ€”one of the most common characteristics in time series data. Seasonality refers to patterns that repeat at regular intervals, such as daily, weekly, or yearly trends, and detecting it is essential for accurate forecasting.

## Data Loading

```{python import_data}

file_path = os.path.expanduser("~/Documents") + "\\DS_advanced_website\\data\\example_air_quality.csv"

air_quality_df = pd.read_csv(file_path,
                             index_col = "Date_Time")

air_quality_df.index = pd.to_datetime(air_quality_df.index)

```

The dataset `air_quality_df` is loaded from a CSV file and indexed by a column named `Date_Time`, which represents timestamps of the air quality readings. This timestamp index is essential for time series analysis, allowing us to analyze the data in chronological order. The dataset includes sensor readings such as `CO_sensor`, which captures the concentration of carbon monoxide (CO) in the air, and `RH`, which records relative humidity (RH) levels. These two variables provide environmental and pollutant measurements that will be key in our analysis.

## Data Visualization

```{python plot_data}

for temp_col in air_quality_df.columns.values:
  air_quality_df[temp_col].plot(figsize = (20,6))
  plt.title(temp_col, fontsize=20)  # Increase the title font size
  plt.tick_params(axis='both', which='major', labelsize=16)
  plt.xlabel('')  # Disable x-axis label
  plt.ylabel('')  # Disable y-axis label
  plt.show()

```

Here, we plot each of the columns in the dataset (`CO_sensor` and `RH`) to visually explore the time series data. These plots provide a general understanding of how pollutant levels (CO_sensor) and humidity (RH) fluctuate over time. Larger trends, spikes, or patterns such as seasonality may already be visible, and such visualizations are a useful first step before deeper analysis.

## Handling Missing Values

In time series analysis, it is common to encounter missing data due to sensor malfunctions or recording errors. Properly handling missing data is crucial because forecasting models often assume data points are spaced at regular intervals. To address this, we first ensure the data is uniformly spaced by converting the `Date_Time` index to an hourly frequency. This allows us to easily detect missing data points and fill the gaps accordingly.

```{python impute_missing_values}

impute_df = air_quality_df.asfreq("1h").copy()

for temp_col in impute_df.columns:
  impute_df[temp_col + "_imputed"] = impute_df[temp_col]
  impute_df[temp_col + "_imputed"] = impute_df[temp_col + "_imputed"].ffill()

```

In this block, we address missing values by using forward-filling (`ffill()`), which propagates the last valid observation forward until a new non-missing value is encountered. This technique works well when the missing values are sparse or when we expect the data to remain stable over short intervals. We create new columns, such as `CO_sensor_imputed` and `RH_imputed`, to store the imputed values, allowing us to compare them with the original data and ensure that no critical information is lost.

## Visualizing Imputed Values

To ensure that our imputation strategy has been applied correctly, we will visually compare the original data with the imputed values. This comparison will highlight where missing values were filled and help us verify that the imputation did not introduce any distortions into the time series.

```{python plot_missing_and_imputed_values}

for temp_col in ["CO_sensor","RH"]:
  
  ax = impute_df[temp_col].plot(figsize = (20,6))
  
  impute_df[impute_df[temp_col].isnull()][temp_col + "_imputed"].plot(
    ax = ax,legend = False,marker = ".", color = "red", linestyle='None')
    
  plt.title(temp_col, fontsize=20)  # Increase the title font size
  
  plt.tick_params(axis='both', which='major', labelsize=16)
  
  plt.xlabel('')  # Disable x-axis label
  
  plt.ylabel('')  # Disable y-axis label
  
  plt.show()

```

In this step, we overlay the imputed values onto the original time series. The original data is represented by a continuous line, while missing values that were filled via forward-fill are marked with red dots. This side-by-side comparison helps us visually assess the areas where imputation occurred and check whether it was applied appropriately without affecting the overall trend of the data.

## Seasonality

Seasonality is a recurring pattern in data that occurs at regular intervals, often influenced by natural or social processes. In the context of air quality, pollutant levels such as carbon monoxide may follow daily or weekly cycles due to human activities like traffic or industrial operations. To detect seasonality, we group the data by the time of day (i.e., by the hour) and calculate the average pollutant levels across all observations for each hour. This provides a clear picture of how pollutant concentrations vary throughout the day.

```{python plot_seasonality}

hours_con = impute_df.groupby(impute_df.index.time)[
  "CO_sensor"].mean().reset_index()

hours_con.plot(x = 'index', y = 'CO_sensor', legend = False)
plt.title("Pollutant concentration over day time")
plt.xlabel("")
plt.ylabel("")
plt.show()

```

In this final step, we plot the average `CO_sensor` concentration over the course of a typical day to visualize the intra-day seasonality. This chart allows us to observe how carbon monoxide levels fluctuate during different times of the day, potentially reflecting periods of higher traffic or other factors that influence air quality. Understanding these seasonal patterns is key for making accurate predictions and taking appropriate action in environmental monitoring.
