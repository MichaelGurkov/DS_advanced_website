---
title: "Trend features"
---

```{r set_up_python, echo=FALSE}
#|echo: FALSE

if (Sys.getenv("USERPROFILE") == "C:\\Users\\internet"){
  
  python_path = paste0("C:\\Users\\internet\\AppData\\Local",
                       "\\Programs\\Python\\Python312\\python.exe")
} else {
  
  python_path = paste0("C:\\Users\\Home\\AppData\\Local",
                       "\\Programs\\Python\\Python312\\python.exe")
}

reticulate::use_python(python_path)

```

```{python}

import numpy as np

import pandas as pd

import matplotlib.pyplot as plt

import seaborn as sns

import os 

from sklearn.linear_model import LinearRegression

from sklearn.tree import DecisionTreeRegressor

```

```{python import_data}

file_path = os.path.expanduser("~/Documents") + "\\DS_advanced_website\\data\\example_air_passengers.csv"

raw_df = pd.read_csv(file_path,index_col = "date")

raw_df.index = pd.to_datetime(raw_df.index)


```

## Split data

```{python split_train_test_data}


raw_df["trend"] = (raw_df.index - raw_df.index.min()).days.astype(float)

split_date = pd.to_datetime("1960-01-01")



X_train = raw_df[["trend"]].loc[raw_df.index <= split_date]

X_test = raw_df[["trend"]].loc[raw_df.index > split_date]

y_train = raw_df["passengers"].loc[raw_df.index <= split_date]

y_test = raw_df["passengers"].loc[raw_df.index > split_date]


```




## Linear trend

### Linear model

```{python lin_reg_pred}

lin_reg = LinearRegression()

lin_reg.fit(X_train, y_train)

y_pred_train_lin_reg = lin_reg.predict(X_train)

y_pred_test_lin_reg = lin_reg.predict(X_test)


```


```{python plot__function}

def plot_pred(df,pred_train, pred_test):
  
  plot_df = df.copy()
  
  plot_df["pred"] = np.concatenate([pred_train, pred_test])
  
  plot_df["type"] = np.concatenate([["train"] * len(pred_train),
                                    ["test"] * len(pred_test)])
  
  plot_df = plot_df.reset_index().copy()
                                    
  plot_df = plot_df.melt(id_vars = ["type", "date"],
                         value_vars = ["passengers","pred"],
                         var_name = "line_type").copy()
                         
  plt.clf()
                         
  sns.lineplot(data=plot_df, x="date",
               y="value", hue="type", style="line_type", legend = False)
  
  

  plt.show()


```

```{python plot_line_reg}

plot_pred(df = raw_df.copy(), pred_train = y_pred_train_lin_reg,
          pred_test = y_pred_test_lin_reg)


```

### Tree model

```{python }

tree_model = DecisionTreeRegressor(max_depth = 1)

tree_model.fit(X_train, y_train)

y_pred_train_tree = tree_model.predict(X_train)

y_pred_test_tree = tree_model.predict(X_test)


```


```{python plot_tree}

plot_pred(df = raw_df.copy(), pred_train = y_pred_train_tree,
          pred_test = y_pred_test_tree)


```

