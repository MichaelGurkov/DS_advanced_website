---
title: "Window features"
---

```{r set_up_python, echo=FALSE}
#|echo: FALSE

if (Sys.getenv("USERPROFILE") == "C:\\Users\\internet"){
  
  python_path = paste0("C:\\Users\\internet\\AppData\\Local",
                       "\\Programs\\Python\\Python312\\python.exe")
} else {
  
  python_path = paste0("C:\\Users\\Home\\AppData\\Local",
                       "\\Programs\\Python\\Python312\\python.exe")
}

reticulate::use_python(python_path)

```

```{python}

import numpy as np

import pandas as pd

import os 


from feature_engine.timeseries.forecasting import WindowFeatures, ExpandingWindowFeatures

from sktime.transformations.series.summarize import WindowSummarizer

# plotting libraries
import matplotlib.pyplot as plt
import numpy as np
import pandas as pd
import seaborn as sns
from matplotlib.ticker import MaxNLocator


```

```{python import_data}

file_path = os.path.expanduser("~/Documents") + "\\DS_advanced_website\\data\\example_electricity.csv"

raw_df = pd.read_csv(file_path)

raw_df.index = pd.to_datetime(raw_df["date_time"])

raw_df = raw_df.drop(columns = ["date_time"]).copy()

raw_df = raw_df.loc["2010":].copy()



```

```{python plot_demand}

raw_df["demand"].plot()


plt.show()

```

```{python plot_subset_of_demand}

plt.clf()

raw_df.loc["2014":,"demand"].plot()

plt.show()

```

### Rolling windows
++ explain that the data set seems to have seasonality on different (daily, weekly, yearly) time scales and we'll use window features to extract and capture this information

```{python pandas_implementation}

def mad(x):
  return np.median(np.abs(x - np.median(x)))


win_df_pandas = raw_df.rolling(window = 24).agg(["mean","std",mad]).shift(freq = "1h").copy()


```

```{python feature_engine_implementation}

win_fe_trans = WindowFeatures(variables = ["demand","temperature"],
                           functions = ["mean","std"],
                           window = [24, 24 * 7, 24 * 365],
                           freq = "1h")
                           
win_df_fe = win_fe_trans.fit_transform(raw_df.copy())


```

```{python plot_fe}

plt.clf()

col_names = win_df_fe.filter(regex = "demand_window_[0-9]+(_mean)+").columns

win_df_fe[col_names].plot()

plt.show()

```

### Expanding windows

```{python pandas_implementation_expanding}

def mad(x):
  return np.median(np.abs(x - np.median(x)))


win_df_pandas_exp = raw_df.loc["2015":].expanding().agg(["mean","std",mad]).shift(freq = "1h").copy()


```

```{python feature_engine_implementation_expanding}

win_fe_trans_exp = ExpandingWindowFeatures(variables = ["demand","temperature"],
                           functions = ["mean","std"],
                           freq = "1h")
                           
win_df_fe_exp = win_fe_trans_exp.fit_transform(raw_df.loc["2015":].copy())


```

### Exponential weights

```{python }

def exp_weights(series_len, alpha):
  weights_vec = np.ones(series_len)
  for temp_ind in range(1,series_len):
    weights_vec[series_len - temp_ind - 1] = (1 - alpha) * weights_vec[series_len - temp_ind]
  return weights_vec

def exp_weighted_mean(x, alpha = 0.05):
  weights_vec = exp_weights(len(x), alpha = alpha)
  result = (weights_vec * x).sum() / weights_vec.sum()
  return result

```

```{python weighted_mean_demand}

weight_df = raw_df.loc["2015":,["demand"]].copy()

mean_df = (weight_df
                    .rolling(window = 24 * 7)
                    .agg(["mean", exp_weighted_mean])
                    .shift(freq = "1h").copy())
                    
mean_df.columns = ['_'.join(col) if isinstance(col, tuple) else col for col in mean_df.columns]
                    
weight_df = weight_df.join(mean_df)

weight_df.dropna(inplace = True)

```

```{python plot_exponential_weights_df}

plt.clf()

weight_df.plot()

plt.show()

```

```{python import_feature_engine_functions}

from feature_engine.timeseries.forecasting import LagFeatures, WindowFeatures, ExpandingWindowFeatures
from feature_engine.imputation import DropMissingData
from sklearn.pipeline import Pipeline
from sklearn.preprocessing import StandardScaler

```

```{python set_transformation_pipeline}
# Lag features
lag_transformer = LagFeatures(variables=["demand", "temperature"],
                              periods=[1, 2, 3, 24, 24 * 7])
                              

# Window features
window_transformer = WindowFeatures(
    variables=["demand", "temperature"],
    functions=["mean", "std", "kurt", "skew"],
    window=[24, 24 * 7, 24 * 7 * 4, 24 * 7 * 4 * 12],
    periods=1,
)


# Expanding features
expanding_window_transformer = ExpandingWindowFeatures(
    variables=["demand"], 
    functions=["mean", "std", "kurt", "skew"]
)


# Drop missing data introduced by window and lag features
imputer = DropMissingData()

trans_pipe = Pipeline(
    [
        ("lag", lag_transformer),
        ("rolling", window_transformer),
        ("expanding", expanding_window_transformer),
        ("drop_missing", imputer)
    ]
)


```

```{python transofrm_df}

processed_df = trans_pipe.fit_transform(raw_df.copy())

```

```{python select_features}

from sklearn.linear_model import Lasso

X = processed_df.drop(columns = ["demand"]).copy()

y = processed_df["demand"]

X_mat = StandardScaler().fit_transform(X)

lasso_model = Lasso(alpha = 1)

lasso_model.fit(X,y)

```


```{python plot_features}

selected_features = pd.DataFrame({"feature_names":X.columns,
                                  "values":lasso_model.coef_})
                                  
selected_features = selected_features.sort_values("values",
                                                  key = abs,
                                                  ascending = False).iloc[0:10].copy()



```

```{python }

plt.clf()

plt.figure(figsize=(15, 6))

selected_features.sort_values("values").plot(kind = "barh", x = "feature_names",
                       y = "values", legend = False)

plt.title("Selected features")

plt.ylabel("")

plt.subplots_adjust(left=0.7)

plt.show()

```

