---
title: "Forecasting comparison - recursive vs one step approach"
---

```{r set_up_python, echo=FALSE}
#|echo: FALSE

if (Sys.getenv("USERPROFILE") == "C:\\Users\\internet"){
  
  python_path = paste0("C:\\Users\\internet\\AppData\\Local",
                       "\\Programs\\Python\\Python312\\python.exe")
} else {
  
  python_path = paste0("C:\\Users\\Home\\AppData\\Local",
                       "\\Programs\\Python\\Python312\\python.exe")
}

reticulate::use_python(python_path)

```

```{python}

import numpy as np

import pandas as pd

from feature_engine.creation import CyclicalFeatures

from feature_engine.datetime import DatetimeFeatures

from feature_engine.imputation import DropMissingData

from feature_engine.selection import DropFeatures 

from feature_engine.timeseries.forecasting import (LagFeatures, WindowFeatures)

from sklearn.linear_model import Lasso

from sklearn.multioutput import MultiOutputRegressor

from sklearn.metrics import root_mean_squared_error

from sklearn.pipeline import Pipeline

import matplotlib.pyplot as plt

import os 

```


```{python import_data}

file_path = os.path.expanduser("~/Documents") + "\\DS_advanced_website\\data\\example_air_quality.csv"

raw_df = pd.read_csv(file_path,
                             index_col = "Date_Time")

raw_df.index = pd.to_datetime(raw_df.index)

```


```{python define_preprocessing}

date_time_feat = DatetimeFeatures(
  variables = "index",
  features_to_extract = ["month","week","day_of_week",
                         "day_of_month","hour","weekend"]
                         )

lag_feat = LagFeatures(
  variables = ["CO_sensor","RH"],
  freq = ["1h","24h"],
  missing_values = "ignore"
)


window_feat = WindowFeatures(
  variables = ["CO_sensor","RH"],
  window = "3h",
  freq = "1h",
  missing_values = "ignore"
)


cyclical_feat = CyclicalFeatures(
  variables = ["month","hour"],
  drop_original = False
)


na_drop = DropMissingData()

drop_feat = DropFeatures(features_to_drop = ["CO_sensor","RH"])


trans_pipe = Pipeline(
  [("date_time_features",date_time_feat),
   ("lag_features",lag_feat),
   ("window_features",window_feat),
   ("periodic_features",cyclical_feat),
   ("drop_original_features",drop_feat),
   ("drop_missing_values",na_drop)
  ]
  
)


```


```{python pipeline}

trans_pipe = Pipeline(
  [("date_time_features",date_time_feat),
   ("lag_features",lag_feat),
   ("window_features",window_feat),
   ("periodic_features",cyclical_feat),
   ("drop_original_features",drop_feat),
   ("drop_missing_values",na_drop)
  ]
  
)
del date_time_feat, lag_feat, window_feat, cyclical_feat, drop_feat,na_drop

```


# Train test split

```{python test_set_for_recursive_forecasting}

split_point = pd.Timestamp("2005-03-04")

X_train_recursive = raw_df.loc[raw_df.index < split_point]

X_test_recursive = raw_df.loc[raw_df.index >= split_point - pd.offsets.Hour(24)]

Y_train_recursive = raw_df.loc[raw_df.index < split_point,["CO_sensor", "RH"]]

Y_test_recursive = raw_df.loc[raw_df.index >= split_point - pd.offsets.Hour(24),
                   ["CO_sensor", "RH"]]




```

```{python test_set_for_direct_forecasting}

X_train_direct = X_train_recursive.copy()

X_test_direct = X_test_recursive.copy()


Y_train_direct = pd.DataFrame(index = X_train_direct.index)

Y_test_direct = pd.DataFrame(index = X_test_direct.index)

for temp_h in range(24):
  
  Y_train_direct[f"h_{temp_h}"] = X_train_direct["CO_sensor"].shift(-temp_h, freq = "h")
  
  Y_test_direct[f"h_{temp_h}"] = X_test_direct["CO_sensor"].shift(-temp_h, freq = "h")



Y_train_direct = Y_train_direct.dropna().copy()

Y_test_direct = Y_test_direct.dropna().copy()

X_train_direct = X_train_direct.loc[Y_train_direct.index]

X_test_direct = X_test_direct.loc[Y_test_direct.index]

```


## Preprocess data

```{python preprocess_data_recursive_forecasting}

X_train_recursive_processed = trans_pipe.fit_transform(X_train_recursive.copy())

Y_train_recursive = Y_train_recursive.loc[X_train_recursive_processed.index]

```


```{python preprocess_data_direct_forecasting}

X_train_direct_processed = trans_pipe.fit_transform(X_train_direct.copy())

Y_train_direct = Y_train_direct.loc[X_train_direct_processed.index]


X_test_direct_processed = trans_pipe.fit_transform(X_test_direct.copy())

Y_test_direct = Y_test_direct.loc[X_test_direct_processed.index]


```


# Estimation and prediction

## Direct

```{python direct_estimation}

lasso_model_direct = MultiOutputRegressor(Lasso())

lasso_model_direct.fit(X_train_direct_processed , Y_train_direct)

```


```{python direct_predict}

pred_direct = lasso_model_direct.predict(X_test_direct_processed)

pred_direct = pd.DataFrame(data = pred_direct, index = X_test_direct_processed.index)

pred_direct = pred_direct[[23]].copy()

pred_direct.columns = ["direct_forecast"]

```

## Recursive

```{python recursive_forecasting_auxilary_functions}

def forecast_next_point(input_data, model, preprocess_pipe):
  input_data_processed = preprocess_pipe.transform(input_data)
  prediction = model.predict(input_data_processed)
  return(prediction)

def update_input_data(input_data, last_prediction):
  input_data.iloc[len(input_data) - 1] = last_prediction
  input_data = input_data.iloc[1:].copy()
  next_forecast_row = pd.DataFrame(
                      data = np.nan,
                      index = [input_data.index.max() + pd.offsets.Hour(1)],
                      columns = input_data.columns.values
                      )
                      
  input_data = pd.concat([input_data.copy(), next_forecast_row], axis = 0)
  return input_data

def make_recursive_forecast(forecast_horizon,
                            initial_input_data,model, preprocess_pipe):
                              
    # Initial case
                              
    current_data = initial_input_data.copy()

    current_pred = forecast_next_point(initial_input_data,model,preprocess_pipe)
    
    predictions_df = pd.DataFrame(data = current_pred,
                                  index = [initial_input_data.index.max()],
                                  columns = initial_input_data.columns.values)
                                  
    # Loop through the remaining forecasting range                            
    
    for temp_hor in range(1, forecast_horizon):
      
      current_data = update_input_data(current_data.copy(), current_pred)
      
      current_pred = forecast_next_point(current_data, model, preprocess_pipe)
      
      predictions_df = pd.concat([predictions_df.copy(),
                                  pd.DataFrame(data = current_pred,
                                  index = [current_data.index.max()],
                                  columns = current_data.columns.values)],
                                  axis = 0)
                                  
    return predictions_df



```


```{python recursive_forecasting}


lasso_model_recursive = MultiOutputRegressor(Lasso())

lasso_model_recursive.fit(X_train_recursive_processed, Y_train_recursive)


first_forecast_point = pd.Timestamp("2005-03-04")

first_input_data = X_test_recursive.loc[
  (X_test_recursive.index >= first_forecast_point - pd.offsets.Hour(24)) &
  (X_test_recursive.index < first_forecast_point)
  ]
                        
forecast_row = pd.DataFrame(data = np.nan,
                            index = [first_forecast_point],
                            columns = ["CO_sensor","RH"])
                            
first_input_data = pd.concat([first_input_data.copy(),
                              forecast_row], axis = 0)

  
  
pred_recursive = make_recursive_forecast(forecast_horizon = 24,
                               initial_input_data = first_input_data,
                               model = lasso_model_recursive,
                               preprocess_pipe = trans_pipe)
                               

pred_recursive = pred_recursive[["CO_sensor"]].copy()

pred_recursive.columns = ["recursive_forecast"]

```


# Comparison

```{python }

pred_df = pd.merge(pred_direct.copy(), pred_recursive.copy(),
                   left_index = True, right_index = True,how = 'inner')
                   

pred_df = pd.merge(pred_df.copy(), X_test_direct[["CO_sensor"]].copy(),
                   left_index = True, right_index = True,how = 'inner')
                   
# Plotting
plt.figure(figsize=(10, 6))
plt.plot(pred_df.index, pred_df['direct_forecast'], label='Direct')
plt.plot(pred_df.index, pred_df['recursive_forecast'], label='Recursive')
plt.plot(pred_df.index, pred_df['CO_sensor'], label='True values')

# Customize the plot
plt.title('Comparison of recursive and direct forecast')
plt.legend()
plt.grid(True)

# Show the plot
plt.tight_layout()
plt.show()

```

