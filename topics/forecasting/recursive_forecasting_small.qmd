---
title: "Recursive forecasting with lag and window feature"
---

```{r set_up_python, echo=FALSE}
#|echo: FALSE

if (Sys.getenv("USERPROFILE") == "C:\\Users\\internet"){
  
  python_path = paste0("C:\\Users\\internet\\AppData\\Local",
                       "\\Programs\\Python\\Python312\\python.exe")
} else {
  
  python_path = paste0("C:\\Users\\Home\\AppData\\Local",
                       "\\Programs\\Python\\Python312\\python.exe")
}

reticulate::use_python(python_path)

```

```{python load_libraries}
import numpy as np

import pandas as pd

import matplotlib.pyplot as plt

import seaborn as sns

import os 

from sklearn.pipeline import Pipeline

from sklearn.base import clone

from sklearn.linear_model import LinearRegression

from sktime.transformations.series.summarize import WindowSummarizer

```

```{python import_data}

file_path = os.path.expanduser("~/Documents") + "\\DS_advanced_website\\data\\example_air_passengers.csv"

raw_df = pd.read_csv(file_path,index_col = "date")

raw_df.index = pd.to_datetime(raw_df.index)

```

# Split data

```{python split_train_test_data}

split_date = pd.to_datetime("1960-01-01")

train_set = raw_df.loc[raw_df.index <= split_date].copy()


test_set = raw_df.loc[raw_df.index > split_date].copy()

```

# Preprocess data

```{python set_basic_pipeline}

target = ["passengers"]

win_lag_trans = WindowSummarizer(lag_feature = {"lag":[1],"mean":[[1,2]]},
                                       target_cols = target,
                                       truncate = "bfill", n_jobs=1)

basic_pipeline = Pipeline([("basic_preprocess",win_lag_trans)])


```

```{python preprocess_train_set, error=TRUE}

y_train_processed = train_set[target]

basic_pipeline.fit(train_set.copy())

X_train_processed = basic_pipeline.transform(train_set.copy())



```

# Fit model

```{python fit_model}

lin_reg = LinearRegression()

lin_reg.fit(X_train_processed, y_train_processed)

```


## First point

```{python predict_first_point}


feature_source_data = train_set.copy()

first_forecast_date = train_set.index.max() + pd.DateOffset(days = 1)

feature_source_data.loc[first_forecast_date] = np.nan

feature_vec = basic_pipeline.transform(feature_source_data.copy())

feature_vec = feature_vec.iloc[[len(feature_vec) - 1]].copy()

first_pred = lin_reg.predict(feature_vec)

manual_preds = pd.DataFrame(index = [first_forecast_date],
                            data = first_pred)

```


## Second point

```{python predict_second_point}

feature_source_data.loc[first_forecast_date] = first_pred

second_forecast_date = first_forecast_date + pd.DateOffset(days = 1)

feature_source_data.loc[second_forecast_date] = np.nan

feature_vec = basic_pipeline.transform(feature_source_data.copy())

feature_vec = feature_vec.iloc[[len(feature_vec) - 1]].copy()

second_pred = lin_reg.predict(feature_vec)

manual_preds = pd.concat([manual_preds,pd.DataFrame(index = [second_forecast_date],
                            data = second_pred)], axis = 0).copy()

manual_preds.columns = ["passengers"]

```



#Automate recursive forecast


```{python auxilary_functions}


def make_recursive_forecast(forecast_horizon,X_train, y_train,
                            model, preprocess_pipe):
    
    # Preprocess data and fit model
    
    feature_source_data, model_spec,preprocess_pipe_spec = \
    preprocess_data_and_fit_model(X_mat = X_train.copy(),
                    Y_mat = y_train.copy(),
                    model_spec = model,
                    preprocess_pipe_spec = preprocess_pipe)
                    
    
     
                    
    # Make next prediction
    
    next_pred = predict_next_point(feature_source_data = feature_source_data,
                              model_spec = model_spec,
                              preprocess_pipe_spec = preprocess_pipe_spec)
                              
    predictions_df = next_pred.copy()                          
    
    # Update feature_source_data and iterate
    
    for step in range(1, forecast_horizon):
    
      feature_source_data = pd.concat([feature_source_data.copy(),
                                       next_pred], axis = 0)
                                       
      next_pred = predict_next_point(feature_source_data = feature_source_data,
                                model_spec = model_spec,
                                preprocess_pipe_spec = preprocess_pipe_spec)
                                
      predictions_df = pd.concat([predictions_df.copy(), next_pred],
                                  axis = 0)
                                  
    
    return predictions_df
    
    
 
def preprocess_data_and_fit_model(X_mat, Y_mat,preprocess_pipe_spec, model_spec):
  
  preprocess_pipe_spec.fit(X_mat.copy())
  
  X_mat_processed = preprocess_pipe_spec.transform(X_mat.copy())

  Y_mat_processed = Y_mat.loc[X_mat_processed.index].copy()
  
  model_spec.fit(X_mat_processed,Y_mat_processed)
  
  feature_source_data = X_mat.copy()
  
  return([feature_source_data, model_spec,preprocess_pipe_spec])


def predict_next_point(feature_source_data,model_spec,preprocess_pipe_spec):
  
  forecast_index = feature_source_data.index.max() + pd.DateOffset(months = 1)
  
  forecast_index_row = pd.DataFrame(data = np.nan,
                              index = [forecast_index],
                              columns = ["passengers"])
                              
  feature_source_data = pd.concat([feature_source_data.copy(),
                                forecast_index_row], axis = 0)
                                
  feature_vec = preprocess_pipe_spec.transform(feature_source_data)
  
  feature_vec = feature_vec.iloc[[len(feature_vec) - 1]].copy()
  
  predictions = model_spec.predict(feature_vec)
  
  predictions_df = pd.DataFrame(data = predictions,
                              index = [forecast_index],
                              columns = ["passengers"])
  
  return predictions_df

```


```{python make_predictions}


predictions_for_10_days = make_recursive_forecast(forecast_horizon = 10,
                                               X_train = train_set.copy(),
                                               y_train = train_set.copy(),
                                               model = LinearRegression(),
                                               preprocess_pipe = clone(basic_pipeline))
                               
print(predictions_for_10_days.tail())


```


```{python test_for_equality}

print(f"Manual predictions are equal to automatic predicitons: {manual_preds.equals(predictions_for_10_days.iloc[0:2])}")


```


# Advanced preprocessing


```{python import_advanced_libraries}

from sklearn.preprocessing import MinMaxScaler, PolynomialFeatures

from sktime.transformations.series.time_since import TimeSince

```



```{python define_advanced_preprocessing}

from sklearn.pipeline import make_union

from sklearn import set_config

set_config(transform_output="pandas")

target = ["passengers"]

trend_adv = TimeSince(freq="MS")

poly_adv = PolynomialFeatures(degree=2, include_bias=False)

win_lag_adv = WindowSummarizer(
    lag_feature={
        "lag": [1, 2, 3, 12],
        "mean": [[1, 12]],
    },
    target_cols=target,
    truncate="bfill", n_jobs = 1
)

#advanced_union = make_union(trend_adv, poly_adv, win_lag_adv)

advanced_union = make_union(trend_adv, win_lag_adv)

# Apply scaling afterward
advanced_pipeline = Pipeline([
    ("union", advanced_union),        # Independent transformations
    ("normalize", MinMaxScaler())     # Scaling applied to the combined output
])


del trend_adv, poly_adv, win_lag_adv

```


```{python split_train_test_advanced}

advanced_split_point = pd.to_datetime("1955-10-01")

train_set_adv = raw_df.loc[raw_df.index <= advanced_split_point].copy()

test_set_adv = raw_df.loc[raw_df.index > advanced_split_point].copy()

adv_predictions = make_recursive_forecast(forecast_horizon = 36,
                                          X_train = train_set_adv.copy(),
                                          y_train = train_set_adv.copy(),
                                          model = LinearRegression(),
                                          preprocess_pipe = clone(advanced_pipeline))


```

```{python evaluation}

comparison_df = test_set_adv.copy().join(adv_predictions.copy(), how = "inner",
                         lsuffix='_actual', rsuffix='_pred')


comparison_df.plot()

plt.show()


```

