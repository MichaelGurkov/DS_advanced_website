---
title: "STL Decomposition"
---

## Introduction

STL decomposition (Seasonal and Trend decomposition using Loess) is a powerful tool in time series analysis that breaks down a time series into three distinct components: trend, seasonality, and remainder (noise or residual). This decomposition helps in understanding the underlying patterns in the data, isolating cyclical variations, and detecting anomalies. In this tutorial, we will demonstrate how to implement STL decomposition using Python's `statsmodels` library, and provide a detailed explanation of key parameters, as well as steps to visualize the results.

```{r set_up_python, echo=FALSE}
#|echo: FALSE

if (Sys.getenv("USERPROFILE") == "C:\\Users\\internet"){
  
  python_path = paste0("C:\\Users\\internet\\AppData\\Local",
                       "\\Programs\\Python\\Python312\\python.exe")
} else {
  
  python_path = paste0("C:\\Users\\Home\\AppData\\Local",
                       "\\Programs\\Python\\Python312\\python.exe")
}

reticulate::use_python(python_path)

```

```{python}

import numpy as np

import pandas as pd

import matplotlib.pyplot as plt

import os 

from statsmodels.tsa.seasonal import STL

```

```{python import_data}

file_path = os.path.expanduser("~/Documents") + "\\DS_advanced_website\\data\\example_retail_sales.csv"

raw_df = pd.read_csv(file_path,index_col = "date")

raw_df.index = pd.to_datetime(raw_df.index)

```

## Trend

The `STL` implementation in `statsmodels.tsa.seasonal` offers several parameters that allow customization of the decomposition process. Below are the key parameters we used:

- **`period`**: This parameter specifies the length of one complete cycle of the seasonal component. In this example, we set `period=12`, assuming the data exhibits monthly seasonality over a year.
- **`seasonal`**: This controls the degree of smoothing for the seasonal component. A higher value results in more flexible seasonal components. Here, `seasonal=7` indicates moderate smoothing.
- **`robust`**: When set to `True`, the decomposition becomes robust to outliers. This ensures that the trend and seasonal components are not unduly influenced by extreme values.

Other parameters of the STL class, such as `trend` or `low_pass`, are left at their default values, which are typically sufficient for most use cases.

```{python stl_decomp}

decompostion_df = raw_df.copy()

stl_decomp = STL(endog = decompostion_df["sales"], period = 12, seasonal = 7,
                 robust = True).fit()
                 
decompostion_df["trend"] = stl_decomp.trend

decompostion_df["seasonality"] = stl_decomp.seasonal

decompostion_df["remainder"] = stl_decomp.resid
                 
```

## Visualization

After performing the decomposition, it's crucial to visualize the components to better interpret the data. The following code generates individual plots for the trend, seasonality, and remainder components, allowing us to inspect each part separately.

```{python plot_decompositon}

plt.clf()

fig, axes = plt.subplots(nrows=3, ncols=1, figsize=(8, 12))

decompostion_df["trend"].plot(ax = axes[0], title = "trend")
decompostion_df["seasonality"].plot(ax = axes[1], title = "seasonality")
decompostion_df["remainder"].plot(ax = axes[2], title = "remainder")

# Adjust layout to avoid overlap
plt.tight_layout(pad = 3.0)

# Show the plot
plt.show()

```

## Summary

STL decomposition is an invaluable technique for time series analysis, offering insights into the underlying patterns by breaking the data into trend, seasonal, and remainder components. This tutorial demonstrated the implementation of STL decomposition using Python's `statsmodels` library, explaining key parameters such as `period`, `seasonal`, and `robust`. Finally, we visualized the components to provide a clear understanding of how each contributes to the overall time series. With these tools, you can perform detailed analyses and make data-driven decisions based on temporal patterns.
