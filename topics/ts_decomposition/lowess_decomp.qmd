---
title: "LOWESS Decomposition"
---

```{r set_up_python, echo=FALSE}
#|echo: FALSE

if (Sys.getenv("USERPROFILE") == "C:\\Users\\internet"){
  
  python_path = paste0("C:\\Users\\internet\\AppData\\Local",
                       "\\Programs\\Python\\Python312\\python.exe")
} else {
  
  python_path = paste0("C:\\Users\\Home\\AppData\\Local",
                       "\\Programs\\Python\\Python312\\python.exe")
}

reticulate::use_python(python_path)

```

```{python}

import numpy as np

import pandas as pd

import matplotlib.pyplot as plt

import os 

from statsmodels.nonparametric.smoothers_lowess import lowess

from sklearn.metrics import root_mean_squared_error

from sklearn.model_selection import KFold

```


```{python import_data}

file_path = os.path.expanduser("~/Documents") + "\\DS_advanced_website\\data\\example_retail_sales.csv"

raw_df = pd.read_csv(file_path,index_col = "date")

raw_df.index = pd.to_datetime(raw_df.index)

```

## LOWESS parametres

++ explain the parameters in python implementations:
frac - fraction of data for the window size (determines the smoothness)
it - number of iterations for robust regression. Also explain the endog and exog parameters


```{python lowess}

y = raw_df["sales"]

x = np.arange(0, len(y))

ts_decomp = lowess(endog = y, exog = x, frac = 0.1, it = 3)

raw_df["trend_lowess"] = ts_decomp[:,1]


```


### Cross validation to select appropriate fraction parameter

```{python }

def get_rmse_for_df(X,y, frac_param):
  KFold_obj = KFold(n_splits = 5, shuffle = True, random_state = 0)
  rmse_list = []
  for train_index, test_index in KFold_obj.split(X,y):
    X_train = X[train_index]
    y_train = y.iloc[train_index]
    X_test = X[test_index]
    y_test = y.iloc[test_index]
    y_pred = lowess(endog = y_train, exog = X_train, frac = frac_param, xvals = X_test)
    rmse = root_mean_squared_error(y_pred, y_test)
    rmse_list.append(rmse)
  return rmse_list


results = []

for temp_frac in [0.05,0.1,0.5,1]:
  rmse_list = get_rmse_for_df(X = x,y = y,frac_param = temp_frac)
  rmse_df = pd.DataFrame(data = rmse_list, columns = ["rmse"])
  rmse_df["frac"] = temp_frac
  results.append(rmse_df)

  
pd.concat(results, axis = 0)
  

```

