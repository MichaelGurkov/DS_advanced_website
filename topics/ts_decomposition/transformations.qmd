---
title: "Transformations"
---

```{r set_up_python, echo=FALSE, message=FALSE, error=FALSE}
#|echo: FALSE
#|message: FALSE

if (Sys.getenv("USERPROFILE") == "C:\\Users\\internet"){
  
  python_path = paste0("C:\\Users\\internet\\AppData\\Local",
                       "\\Programs\\Python\\Python312\\python.exe")
} else {
  
  python_path = paste0("C:\\Users\\Home\\AppData\\Local",
                       "\\Programs\\Python\\Python312\\python.exe")
}

reticulate::use_python(python_path)

```

```{python}

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import os 

from scipy.stats import boxcox

```

## Introduction

Data transformation is an essential preprocessing step in data analysis and machine learning, particularly when dealing with time series or data that exhibits non-linear patterns. Transformations, such as log, Box-Cox, and moving averages, are used to adjust data to make it more amenable to analysis by stabilizing variance, enhancing linearity, or smoothing out noise. These adjustments make it easier to uncover trends, detect seasonality, and improve model performance. This tutorial will explore three key transformations—log transformation, Box-Cox transformation (including the Guerrero method), and moving averages—and demonstrate how each can be applied to real-world time series data to improve its suitability for analysis and forecasting.

```{python import_data}

file_path = os.path.expanduser("~/Documents") + "\\DS_advanced_website\\data\\example_air_passengers.csv"
raw_df = pd.read_csv(file_path,index_col = "date")
raw_df.index = pd.to_datetime(raw_df.index)

```

```{python plot_data}

raw_df["passengers"].plot()
plt.tight_layout()
plt.show()

```

## Log Transformation

To make data more suitable for certain analyses, we may need to transform it. One common reason is to stabilize the variance, especially when dealing with data that shows exponential growth or high variability. Log transformation is an effective method for this. By taking the logarithm of each value in the data, we can compress large values and expand smaller ones, resulting in a dataset where variability across different ranges is reduced. This transformation can make trends more visible and prepare the data for further processing or modeling steps.

```{python plot_log}

raw_df["passengers_log"] = np.log(raw_df["passengers"])
plt.clf()
raw_df["passengers_log"].plot()
plt.tight_layout()
plt.show()

```

## Box-Cox Transformation

The Box-Cox transformation is a versatile method used to stabilize variance across a dataset. Unlike the log transformation, Box-Cox can adapt to various data distributions by tuning the transformation parameter, $\lambda$. Different values of $\lambda$ change the shape of the transformation, allowing for either compression or expansion of data values in a customized way. By testing various $\lambda$ values, we can achieve the best variance stabilization and approximate a normal distribution, which is helpful for many statistical analyses.

In this example, we test a series of $\lambda$ values to demonstrate how the shape of the transformed data changes, which can help identify an optimal transformation for stabilizing variance in our dataset.

```{python}


lambdas_vec = [-1,-0.5,0,0.5,1,2]
plt.clf()
fig, ax = plt.subplots(ncols=2, nrows=3, figsize=[15, 15], sharex=True)
ax = ax.flatten()

for ix, temp_lambda in enumerate(lambdas_vec):
    raw_df["temp_box_cox"] = boxcox(raw_df["passengers"], temp_lambda)
    raw_df.plot(y="temp_box_cox", ax=ax[ix], label=f"lambda = {temp_lambda}")
    ax[ix].legend(fontsize=18)
    ax[ix].set_xlabel("")

plt.tight_layout()
plt.show()

```

### The Guerrero Method

The Guerrero method for the Box-Cox transformation offers a targeted approach to variance stabilization by automatically selecting an optimal $\lambda$ based on the data's seasonal patterns. This method evaluates the seasonal periodicity and adjusts $\lambda$ to achieve minimal variance over time. The advantage of using Guerrero’s method is that it provides a systematic way to stabilize variance in seasonal data without manually testing multiple $\lambda$ values. This automatic tuning is particularly useful when working with time series data with complex seasonal patterns.

```{python guerrero_method}

from sktime.transformations.series.boxcox import BoxCoxTransformer

bc_guerrero = BoxCoxTransformer(method="guerrero", sp=12)
raw_df["passengers_bc_guerrero"] = bc_guerrero.fit_transform(raw_df["passengers"])

plt.clf()
raw_df["passengers_bc_guerrero"].plot()
plt.tight_layout()
plt.show()

```

## Moving Averages

Moving averages are a common technique for smoothing time series data, allowing for a clearer view of the underlying trend by reducing noise. With an odd-sized window, the moving average is symmetric, meaning it has an equal number of data points on either side of the center, which simplifies calculation and interpretation.

When using an even-sized window, achieving symmetry is more challenging because there isn’t a natural center point. To create a balanced, symmetric effect, we can adjust the weights, assigning smaller weights to the edges while retaining higher weights for the central values. Another approach to achieve symmetry with an even window is to apply a secondary moving average of window size 2. This additional step smooths the edge values, effectively balancing the window weights.

```{python import_ma_data}

ma_file_path = os.path.expanduser("~/Documents") + "\\DS_advanced_website\\data\\example_retail_sales.csv"
ma_raw_df = pd.read_csv(ma_file_path, index_col="date")
ma_raw_df.index = pd.to_datetime(ma_raw_df.index)
del ma_file_path

```

### 3-Point Moving Average

Here, we apply a 3-point moving average, which is symmetric by nature. This approach smooths out the data while retaining the central tendency, making it easier to observe general trends without the distraction of short-term fluctuations.

```{python ma_3}

ma_df = ma_raw_df.copy()
ma_df["ma_3"] = ma_df["sales"].rolling(window=3, center=True).mean()

```

```{python plot_ma_3}

plt.clf()
ma_df["ma_3"].plot(color="steelblue")
ma_df["sales"].plot(color="grey", alpha=0.7)
plt.show()

```

### 12-Point Moving Average with Centering

To create a symmetric 12-point moving average, we apply an additional 2-point moving average to our initial 12-point average. This second step reduces the impact of edge weights, creating a balanced smoothing effect. After this adjustment, we shift the result by half the window size to ensure alignment with the original data, resulting in a centered moving average.

```{python ma_2_12}

even_window_size = 12
ma_df["ma_2_12"] = ma_df["sales"].rolling(window=even_window_size).mean()
ma_df["ma_2_12"] = ma_df["ma_2_12"].rolling(window=2, center=True).mean()
ma_df["ma_2_12"] = ma_df["ma_2_12"].shift(-even_window_size // 2)

```

```{python plot_ma_2_12}

plt.clf()
ma_df["ma_2_12"].plot(color="steelblue")
ma_df["sales"].plot(color="grey", alpha=0.7)
plt.show()

```

## Summary

This tutorial has demonstrated the use of log transformations, Box-Cox transformations, and moving averages to prepare time series data for analysis. Each transformation serves a specific purpose: log transformations reduce skewness and stabilize variance, Box-Cox transformations provide flexibility through parameter tuning, and moving averages smooth data for trend analysis. By understanding and applying these techniques, we can better handle data variability, enhance interpretability, and ultimately improve forecasting accuracy. The choice of transformation should align with the data characteristics and analytical goals, making transformations a valuable tool in the data scientist’s arsenal for managing diverse time series data.