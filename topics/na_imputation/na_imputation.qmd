---
title: "Missing Data Imputation"
---

# Introduction

Handling missing data is a critical step in data preprocessing, as the presence of missing values can disrupt analysis and model performance. This tutorial explores various methods for imputing missing data in time series datasets. These methods range from simple approaches, such as forward and backward filling, to more advanced techniques like spline interpolation and seasonal decomposition with interpolation. The goal is to provide a comprehensive guide to imputation, highlighting the strengths and potential pitfalls of each method while maintaining the integrity of the time series data.

```{r set_up_python, echo=FALSE}
#|echo: FALSE

if (Sys.getenv("USERPROFILE") == "C:\\Users\\internet"){
  
  python_path = paste0("C:\\Users\\internet\\AppData\\Local",
                       "\\Programs\\Python\\Python312\\python.exe")
} else {
  
  python_path = paste0("C:\\Users\\Home\\AppData\\Local",
                       "\\Programs\\Python\\Python312\\python.exe")
}

reticulate::use_python(python_path)

```

```{python}

import numpy as np

import pandas as pd

import matplotlib.pyplot as plt

import os 

from statsmodels.tsa.seasonal import STL

```

## Importing the Data

The dataset is loaded and indexed by date. The presence of missing values is identified and summarized to understand the scope of the issue.

```{python import_data}

file_path = os.path.expanduser("~/Documents") + "\\DS_advanced_website\\data\\example_retail_sales_missing.csv"

raw_df = pd.read_csv(file_path,index_col = "date")

raw_df.index = pd.to_datetime(raw_df.index)

na_idx = raw_df.isnull()

```

```{python }

print(f"There are {raw_df['sales'].isnull().sum()} missing values, these are {np.round(raw_df['sales'].isnull().sum() / len(raw_df)* 100,3)} percent of the data")

```

## Visualizing Missing Data

A plot of the data highlights where the missing values occur, providing a visual understanding of their distribution over time.

```{python plot_na}

plt.clf()

raw_df["sales"].plot(marker = ".")

plt.show()

```

## Forward Fill

Forward filling imputes missing values using the last available value. This method is straightforward but may not reflect actual trends if the missing period spans significant variations in the data.

```{python plot_ffil}

ffill_df = raw_df.ffill()

plt.clf()

ax = ffill_df.plot(linestyle="-", marker=".")

ffill_df[na_idx].plot(ax=ax, legend=None, marker=".", color="r")

plt.show()

```

## Backward Fill

Backward filling replaces missing values with the next available value. This approach can lead to data leakage, as it introduces future information into past time points. Care should be taken when using this method, especially in predictive modeling contexts.

```{python plot_bfil}

bfill_df = raw_df.bfill()

plt.clf()

ax = bfill_df.plot(linestyle="-", marker=".")

bfill_df[na_idx].plot(ax=ax, legend=None, marker=".", color="r")

plt.show()

```

## Linear Interpolation

Linear interpolation fills missing values by assuming a linear relationship between neighboring data points. This method is suitable for time series where trends between points are approximately linear.

```{python linear_interpolation}

lin_inter = raw_df.interpolate(method = "time")

plt.clf()

ax = lin_inter.plot(linestyle="-", marker=".")

lin_inter[na_idx].plot(ax=ax, legend=None, marker=".", color="r")

plt.show()

```

## Spline Interpolation

Spline interpolation uses cubic splines to create a smooth curve through the data points, providing a more sophisticated imputation than linear interpolation. It works well when the data has non-linear patterns, but it may overfit in some cases.

```{python spline_interpolation}

spline_inter = raw_df.interpolate(method = "spline", order = 3)

plt.clf()

ax = spline_inter.plot(linestyle="-", marker=".")

spline_inter[na_idx].plot(ax=ax, legend=None, marker=".", color="r")

plt.show()

```

## Seasonal Decomposition and Interpolation

STL (Seasonal and Trend decomposition using Loess) is used to separate the seasonal, trend, and residual components of the time series. Linear interpolation is applied first because STL cannot handle missing data directly. After seasonal decomposition, imputation is performed on the deseasonalized series, and the seasonal component is added back to reconstruct the series.

```{python }

stl_inter = STL(raw_df.interpolate(method = "time"), seasonal = 31).fit()

seasonal_component = stl_inter.seasonal

deaseasonlised_df = raw_df["sales"] - seasonal_component

df_inter = deaseasonlised_df.interpolate(method = "time")

df_final = df_inter + seasonal_component

df_final = df_final.to_frame().rename(columns = {0:"sales"})

```

```{python plot}

plt.clf()

ax = df_final.plot(linestyle="-", marker=".")

df_final[na_idx].plot(ax=ax, legend=None, marker=".", color="r")

plt.show()

```

# Summary

This tutorial explored various imputation techniques for handling missing data in time series datasets. Each method has its own strengths and limitations, with simpler methods like forward and backward filling being easy to implement but prone to introducing bias. Advanced methods like spline interpolation and seasonal decomposition provide more nuanced imputations but require more computational effort and domain understanding. Selecting an appropriate method depends on the nature of the data and the specific goals of the analysis. Proper handling of missing data ensures that the resulting dataset is both accurate and reliable for further analysis or modeling.
