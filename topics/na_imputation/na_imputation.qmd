---
title: "Missing data imputation"
---

```{r set_up_python, echo=FALSE}
#|echo: FALSE

if (Sys.getenv("USERPROFILE") == "C:\\Users\\internet"){
  
  python_path = paste0("C:\\Users\\internet\\AppData\\Local",
                       "\\Programs\\Python\\Python312\\python.exe")
} else {
  
  python_path = paste0("C:\\Users\\Home\\AppData\\Local",
                       "\\Programs\\Python\\Python312\\python.exe")
}

reticulate::use_python(python_path)

```

```{python}

import numpy as np

import pandas as pd

import matplotlib.pyplot as plt

import os 

from statsmodels.tsa.seasonal import STL

```

```{python import_data}

file_path = os.path.expanduser("~/Documents") + "\\DS_advanced_website\\data\\example_retail_sales_missing.csv"

raw_df = pd.read_csv(file_path,index_col = "date")

raw_df.index = pd.to_datetime(raw_df.index)

na_idx = raw_df.isnull()

# url = "https://raw.githubusercontent.com/facebook/prophet/master/examples/example_retail_sales.csv"
# df = pd.read_csv(url)
# 
# df = df.iloc[0:160].copy()
# 
# df.columns = ["date","sales"]
# 
# df = df.set_index("date").copy()
# 
# 
# # Insert missing data into dataframe
# df.iloc[10:11] = np.NaN
# df.iloc[25:28] = np.NaN
# df.iloc[40:45] = np.NaN
# df.iloc[70:94] = np.NaN
# 
# 
# df.to_csv(file_path)

```

```{python }

print(f"There are {raw_df['sales'].isnull().sum()} missing values, these are {np.round(raw_df['sales'].isnull().sum() / len(raw_df)* 100,3)} percent of the data")

```

```{python plot_na}

plt.clf()

raw_df["sales"].plot(marker = ".")

plt.show()

```

## Forward fill

```{python plot_ffil}

ffill_df = raw_df.ffill()

plt.clf()

ax = ffill_df.plot(linestyle="-", marker=".")

ffill_df[na_idx].plot(ax=ax, legend=None, marker=".", color="r")

plt.show()

```

## Backward fill

++ explain that backward filling can introduce "data leakage" because we are carrying to the past information from the future.

```{python plot_bfil}

bfill_df = raw_df.bfill()

plt.clf()

ax = bfill_df.plot(linestyle="-", marker=".")

bfill_df[na_idx].plot(ax=ax, legend=None, marker=".", color="r")

plt.show()

```

## Linear interpolation

```{python linear_interpolation}

lin_inter = raw_df.interpolate(method = "time")

plt.clf()

ax = lin_inter.plot(linestyle="-", marker=".")

lin_inter[na_idx].plot(ax=ax, legend=None, marker=".", color="r")

plt.show()

```

## Spline interpolation

```{python spline_interpolation}

spline_inter = raw_df.interpolate(method = "spline", order = 3)

plt.clf()

ax = spline_inter.plot(linestyle="-", marker=".")

spline_inter[na_idx].plot(ax=ax, legend=None, marker=".", color="r")

plt.show()

```

## Seasonal decomposition and interpolation

++ explain that we first use linear interpolation because STL can not handle missing data

```{python }

stl_inter = STL(raw_df.interpolate(method = "time"), seasonal = 31).fit()

seasonal_component = stl_inter.seasonal

deaseasonlised_df = raw_df["sales"] - seasonal_component

df_inter = deaseasonlised_df.interpolate(method = "time")

df_final = df_inter + seasonal_component

df_final = df_final.to_frame().rename(columns = {0:"sales"})

```

```{python plot}

plt.clf()

ax = df_final.plot(linestyle="-", marker=".")

df_final[na_idx].plot(ax=ax, legend=None, marker=".", color="r")

plt.show()

```
